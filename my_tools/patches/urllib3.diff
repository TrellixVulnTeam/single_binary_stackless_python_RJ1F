diff --git a/connection.py b/connection.py
index ba269b7..c602bfe 100644
--- a/connection.py
+++ b/connection.py
@@ -268,13 +268,14 @@ class VerifiedHTTPSConnection(HTTPSConnection):
     cert_reqs = None
     ca_certs = None
     ca_cert_dir = None
+    ca_cert_data = None
     ssl_version = None
     assert_fingerprint = None
 
     def set_cert(self, key_file=None, cert_file=None,
                  cert_reqs=None, ca_certs=None,
                  assert_hostname=None, assert_fingerprint=None,
-                 ca_cert_dir=None):
+                 ca_cert_dir=None, ca_cert_data=None):
         """
         This method should only be called once, before the connection is used.
         """
@@ -283,7 +284,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):
         # they gave us an SSL Context object we should use whatever is set for
         # it.
         if cert_reqs is None:
-            if ca_certs or ca_cert_dir:
+            if ca_certs or ca_cert_dir or ca_cert_data:
                 cert_reqs = 'CERT_REQUIRED'
             elif self.ssl_context is not None:
                 cert_reqs = self.ssl_context.verify_mode
@@ -295,6 +296,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):
         self.assert_fingerprint = assert_fingerprint
         self.ca_certs = ca_certs and os.path.expanduser(ca_certs)
         self.ca_cert_dir = ca_cert_dir and os.path.expanduser(ca_cert_dir)
+        self.ca_cert_data = ca_cert_data
 
     def connect(self):
         # Add certificate verification
@@ -340,6 +342,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):
             certfile=self.cert_file,
             ca_certs=self.ca_certs,
             ca_cert_dir=self.ca_cert_dir,
+            ca_cert_data=self.ca_cert_data,
             server_hostname=server_hostname,
             ssl_context=context)
 
diff --git a/connectionpool.py b/connectionpool.py
index d65581e..4e1a0fe 100644
--- a/connectionpool.py
+++ b/connectionpool.py
@@ -761,13 +761,13 @@ class HTTPSConnectionPool(HTTPConnectionPool):
                  key_file=None, cert_file=None, cert_reqs=None,
                  ca_certs=None, ssl_version=None,
                  assert_hostname=None, assert_fingerprint=None,
-                 ca_cert_dir=None, **conn_kw):
+                 ca_cert_dir=None, ca_cert_data=None, **conn_kw):
 
         HTTPConnectionPool.__init__(self, host, port, strict, timeout, maxsize,
                                     block, headers, retries, _proxy, _proxy_headers,
                                     **conn_kw)
 
-        if ca_certs and cert_reqs is None:
+        if (ca_certs or ca_cert_data) and cert_reqs is None:
             cert_reqs = 'CERT_REQUIRED'
 
         self.key_file = key_file
@@ -775,6 +775,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):
         self.cert_reqs = cert_reqs
         self.ca_certs = ca_certs
         self.ca_cert_dir = ca_cert_dir
+        self.ca_cert_data = ca_cert_data
         self.ssl_version = ssl_version
         self.assert_hostname = assert_hostname
         self.assert_fingerprint = assert_fingerprint
@@ -791,6 +792,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):
                           cert_reqs=self.cert_reqs,
                           ca_certs=self.ca_certs,
                           ca_cert_dir=self.ca_cert_dir,
+                          ca_cert_data=self.ca_cert_data,
                           assert_hostname=self.assert_hostname,
                           assert_fingerprint=self.assert_fingerprint)
             conn.ssl_version = self.ssl_version
diff --git a/util/ssl_.py b/util/ssl_.py
index d9b2060..39d8adb 100644
--- a/util/ssl_.py
+++ b/util/ssl_.py
@@ -289,7 +289,7 @@ def create_urllib3_context(ssl_version=None, cert_reqs=None,
 def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,
                     ca_certs=None, server_hostname=None,
                     ssl_version=None, ciphers=None, ssl_context=None,
-                    ca_cert_dir=None):
+                    ca_cert_dir=None, ca_cert_data=None):
     """
     All arguments except for server_hostname, ssl_context, and ca_cert_dir have
     the same meaning as they do when using :func:`ssl.wrap_socket`.
@@ -326,6 +326,9 @@ def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,
                 raise SSLError(e)
             raise
 
+    elif ca_cert_data:
+        context.load_verify_locations(cadata=ca_cert_data)
+
     # Don't load system certs unless there were no CA certs or
     # SSLContext object specified manually.
     elif ssl_context is None and hasattr(context, 'load_default_certs'):
