diff --git b/_internal.py a/_internal.py
index 3d1ee09..aace39b 100644
--- b/_internal.py
+++ a/_internal.py
@@ -42,15 +42,15 @@ for _i in chain(range_type(32), range_type(127, 256)):
 
 _octal_re = re.compile(b'\\\\[0-3][0-7][0-7]')
 _quote_re = re.compile(b'[\\\\].')
-_legal_cookie_chars_re = b'[\w\d!#%&\'~_`><@,:/\$\*\+\-\.\^\|\)\(\?\}\{\=]'
+# _legal_cookie_chars_re = b'[\w\d!#%&\'~_`><@,:/\$\*\+\-\.\^\|\)\(\?\}\{\=]'
 _cookie_re = re.compile(b"""
     (?P<key>[^=]+)
-    \s*=\s*
+    \\s*=\\s*
     (?P<val>
         "(?:[^\\\\"]|\\\\.)*" |
          (?:.*?)
     )
-    \s*;
+    \\s*;
 """, flags=re.VERBOSE)
 
 
diff --git b/debug/__init__.py a/debug/__init__.py
index 6124727..9d63740 100644
--- b/debug/__init__.py
+++ a/debug/__init__.py
@@ -9,6 +9,7 @@
     :license: BSD, see LICENSE for more details.
 """
 import os
+import pkgutil
 import re
 import sys
 import uuid
@@ -18,7 +19,7 @@ import getpass
 import hashlib
 import mimetypes
 from itertools import chain
-from os.path import join, dirname, basename, isfile
+from os.path import join, basename
 from werkzeug.wrappers import BaseRequest as Request, BaseResponse as Response
 from werkzeug.http import parse_cookie
 from werkzeug.debug.tbtools import get_current_traceback, render_console_html
@@ -27,7 +28,6 @@ from werkzeug.security import gen_salt
 from werkzeug._internal import _log
 from werkzeug._compat import text_type
 
-
 # DEPRECATED
 #: import this here because it once was documented as being available
 #: from this module.  In case there are users left ...
@@ -346,15 +346,15 @@ class DebuggedApplication(object):
 
     def get_resource(self, request, filename):
         """Return a static resource from the shared folder."""
-        filename = join(dirname(__file__), 'shared', basename(filename))
-        if isfile(filename):
+        filename = join('shared', basename(filename))
+        try:
+            data = pkgutil.get_data(__package__, filename)
+        except OSError:
+            data = None
+        if data is not None:
             mimetype = mimetypes.guess_type(filename)[0] \
                 or 'application/octet-stream'
-            f = open(filename, 'rb')
-            try:
-                return Response(f.read(), mimetype=mimetype)
-            finally:
-                f.close()
+            return Response(data, mimetype=mimetype)
         return Response('Not Found', status=404)
 
     def check_pin_trust(self, environ):
diff --git b/debug/shared/style.css a/debug/shared/style.css
index 2f4c5be..f3a564f 100644
--- b/debug/shared/style.css
+++ a/debug/shared/style.css
@@ -1,3 +1,4 @@
+/*
 @font-face {
   font-family: 'Ubuntu';
   font-style: normal;
@@ -5,6 +6,7 @@
   src: local('Ubuntu'), local('Ubuntu-Regular'),
     url('?__debugger__=yes&cmd=resource&f=ubuntu.ttf') format('truetype');
 }
+*/
 
 body, input  { font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'Geneva',
                'Verdana', sans-serif; color: #000; text-align: center;
diff --git b/routing.py a/routing.py
index 6fe0816..de797ce 100644
--- b/routing.py
+++ a/routing.py
@@ -1379,7 +1379,7 @@ class MapAdapter(object):
 
     def dispatch(self, view_func, path_info=None, method=None,
                  catch_http_exceptions=False):
-        """Does the complete dispatching process.  `view_func` is called with
+        r"""Does the complete dispatching process.  `view_func` is called with
         the endpoint and a dict with the values for the view.  It should
         look up the view function, call it, and return a response object
         or WSGI application.  http exceptions are not caught by default
